/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
import{LitElement as f,html as d,nothing as u}from"lit";import{property as y,state as g,customElement as b}from"lit/decorators.js";import{until as h}from"lit/directives/until.js";import"@typo3/backend/element/spinner-element.js";import"@typo3/backend/element/icon-element.js";import{copyToClipboard as v}from"@typo3/backend/copy-to-clipboard.js";import $ from"@typo3/backend/notification.js";import{lll as m}from"@typo3/core/lit-helper.js";import{markdown as w}from"@typo3/core/directive/markdown.js";import k from"@typo3/core/ajax/ajax-request.js";var c=function(p,t,n,i){var e=arguments.length,s=e<3?t:i===null?i=Object.getOwnPropertyDescriptor(t,n):i,a;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")s=Reflect.decorate(p,t,n,i);else for(var o=p.length-1;o>=0;o--)(a=p[o])&&(s=(e<3?a(s):e>3?a(t,n,s):a(t,n))||s);return e>3&&s&&Object.defineProperty(t,n,s),s};let l=class extends f{constructor(){super(...arguments),this.debug=!1,this.hasChange=!1,this.typeElement=null}createRenderRoot(){return this}render(){const{value:t,systemDefault:n,definition:i}=this.setting;return d`<div class=${`settings-item settings-item-${i.type} ${this.hasChange?"has-change":""}`} tabindex=0 data-status=${JSON.stringify(t)===JSON.stringify(n)?"none":"modified"}><div class=settings-item-indicator></div><div class=settings-item-title><label for=${`setting-${i.key}`} class=settings-item-label>${i.label}</label><div class=settings-item-description>${w(i.description??"","minimal")}</div>${this.debug?d`<div class=settings-item-key>${i.key}</div>`:u}</div><div class=settings-item-control>${h(this.renderField(),d`<typo3-backend-spinner></typo3-backend-spinner>`)}</div><div class=settings-item-message></div><div class=settings-item-actions>${this.renderActions()}</div></div>`}async renderField(){const{definition:t,value:n,typeImplementation:i}=this.setting;let e=this.typeElement;if(!e){const o=await import(i);if(!("componentName"in o))throw new Error(`module ${i} is missing the "componentName" export`);e=document.createElement(o.componentName),this.typeElement=e,e.addEventListener("typo3:setting:changed",r=>{this.hasChange=JSON.stringify(this.setting.value)!==JSON.stringify(r.detail.value)})}const s=Object.entries(t.enum||{}),a={key:t.key,formid:`setting-${t.key}`,name:`settings[${t.key}]`,value:Array.isArray(n)?JSON.stringify(n):String(n),debug:this.debug,readonly:t.readonly,enum:s.length>0?JSON.stringify(Object.fromEntries(s)):!1,default:Array.isArray(t.default)?JSON.stringify(t.default):String(t.default)};for(const[o,r]of Object.entries(a)){if(typeof r=="boolean"){r&&!e.hasAttribute(o)&&e.setAttribute(o,""),!r&&e.hasAttribute(o)&&e.removeAttribute(o);continue}e.getAttribute(o)!==r&&e.setAttribute(o,r)}return e}renderActions(){const{definition:t}=this.setting;return d`<div class=dropdown><button class=dropdown-toggle type=button data-bs-toggle=dropdown aria-expanded=false><typo3-backend-icon identifier=actions-cog size=small></typo3-backend-icon><span class=visually-hidden>More actions</span></button><ul class=dropdown-menu><li><button class="dropdown-item dropdown-item-spaced" type=button ?disabled=${t.readonly} @click=${()=>this.setToDefaultValue()}><typo3-backend-icon identifier=actions-undo size=small></typo3-backend-icon>${m("edit.resetSetting")}</button></li><li><hr class=dropdown-divider></li><li><typo3-copy-to-clipboard text=${t.key} class="dropdown-item dropdown-item-spaced"><typo3-backend-icon identifier=actions-clipboard size=small></typo3-backend-icon>${m("edit.copySettingsIdentifier")}</typo3-copy-to-clipboard></li>${this.dumpuri?d`<li><button class="dropdown-item dropdown-item-spaced" type=button @click=${()=>this.copyAsYaml()}><typo3-backend-icon identifier=actions-clipboard-paste size=small></typo3-backend-icon>${m("edit.copyAsYaml")}</button></li>`:u}</ul></div>`}setToDefaultValue(){this.typeElement&&(this.typeElement.value=this.setting.systemDefault)}async copyAsYaml(){const t=new FormData(this.typeElement.form),n=`settings[${this.setting.definition.key}]`,i=t.get(n),e=new FormData;e.append("specificSetting",this.setting.definition.key),e.append(n,i);const a=await(await new k(this.dumpuri).post(e)).resolve();typeof a.yaml=="string"?v(a.yaml):(console.warn("Value can not be copied to clipboard.",typeof a.yaml),$.error(m("copyToClipboard.error")))}};c([y({type:Object})],l.prototype,"setting",void 0),c([y({type:String})],l.prototype,"dumpuri",void 0),c([y({type:Boolean})],l.prototype,"debug",void 0),c([g()],l.prototype,"hasChange",void 0),l=c([b("typo3-backend-editable-setting")],l);export{l as EditableSettingElement};
