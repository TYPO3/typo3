/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
import{LitElement as f}from"lit";import{defaultConverter as v}from"@lit/reactive-element";import{property as i}from"lit/decorators.js";var s=function(u,t,e,r){var a=arguments.length,o=a<3?t:r===null?r=Object.getOwnPropertyDescriptor(t,e):r,c;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")o=Reflect.decorate(u,t,e,r);else for(var h=u.length-1;h>=0;h--)(c=u[h])&&(o=(a<3?c(o):a>3?c(t,e,o):c(t,e))||o);return a>3&&o&&Object.defineProperty(t,e,o),o};const n=Symbol("internals"),b=Symbol("privateInternals"),p=Symbol("getFormValue"),d=Symbol("getFormState");class l extends f{constructor(){super(...arguments),this.readonly=!1,this.debug=!1}static{this.formAssociated=!0}createRenderRoot(){return this}get[n](){return this[b]||(this[b]=this.attachInternals()),this[b]}get form(){return this[n].form}get labels(){return this[n].labels}get name(){return this.getAttribute("name")??""}set name(t){this.setAttribute("name",t)}get disabled(){return this.hasAttribute("disabled")}set disabled(t){this.toggleAttribute("disabled",t)}attributeChangedCallback(t,e,r){if(t==="name"||t==="disabled"){const a=t==="disabled"?e!==null:e;this.requestUpdate(t,a);return}super.attributeChangedCallback(t,e,r)}requestUpdate(t,e,r){super.requestUpdate(t,e,r),t==="value"&&(this.dispatchEvent(new CustomEvent("typo3:setting:changed",{detail:{value:this.value}})),this[n].setFormValue(this[p](),this[d]()))}formDisabledCallback(t){this.disabled=t}formResetCallback(){const t=this.value,e=this.getAttribute("value");this.attributeChangedCallback("value",this.valueToString(t),null),this.attributeChangedCallback("value",null,e)}formStateRestoreCallback(t){if(typeof t=="string")this.attributeChangedCallback("value",this.valueToString(this.value),null),this.attributeChangedCallback("value",null,t);else throw new Error(`formStateRestoreCallback() needs to be implemented for <${this.localName}> for state type "${typeof t}"`)}[d](){return this[p]()}[p](){return this.valueToString(this.value)}valueToString(t){const r=this.constructor.getPropertyOptions("value");return(typeof r.converter=="object"&&typeof r.converter?.toAttribute=="function"?r.converter.toAttribute:v.toAttribute)(t,r.type)}}s([i({type:String})],l.prototype,"key",void 0),s([i({type:String})],l.prototype,"formid",void 0),s([i({type:Boolean})],l.prototype,"readonly",void 0),s([i({type:Object})],l.prototype,"enum",void 0),s([i({type:Boolean})],l.prototype,"debug",void 0),s([i({noAccessor:!0})],l.prototype,"name",null),s([i({type:Boolean,noAccessor:!0})],l.prototype,"disabled",null);export{l as BaseElement,d as getFormState,p as getFormValue,n as internals};
