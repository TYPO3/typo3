/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
define(["require","exports","TYPO3/CMS/Backend/Notification","TYPO3/CMS/Core/DocumentService","TYPO3/CMS/Core/Event/RegularEvent"],(function(e,t,c,o,n){"use strict";var i,a,l,s,r;!function(e){e.actionsSelector=".t3js-multi-record-selection-actions",e.checkboxSelector=".t3js-multi-record-selection-check",e.checkboxActionsSelector=".t3js-multi-record-selection-check-actions",e.checkboxActionsToggleSelector=".t3js-multi-record-selection-check-actions-toggle"}(i||(i={})),function(e){e.actionButton="button[data-multi-record-selection-action]",e.checkboxActionButton="button[data-multi-record-selection-check-action]",e.checkboxActionsToggleButton='button[data-bs-target="multi-record-selection-check-actions"]'}(a||(a={})),function(e){e.edit="edit"}(l||(l={})),function(e){e.checkAll="check-all",e.checkNone="check-none",e.toggle="toggle"}(s||(s={})),function(e){e.any="",e.checked=":checked",e.unchecked=":not(:checked)"}(r||(r={}));class d{constructor(){this.lastChecked=null,o.ready().then(()=>{d.restoreTemporaryState(),this.registerActions(),this.registerActionsEventHandlers(),this.registerCheckboxActions(),this.registerCheckboxKeyboardActions(),this.registerToggleCheckboxActions(),this.registerDispatchCheckboxStateChangedEvent(),this.registerCheckboxStateChangedEventHandler()})}static getCheckboxes(e=r.any,t=""){return document.querySelectorAll(d.getCombinedSelector(i.checkboxSelector+e,t))}static getCombinedSelector(e,t){return""!==t?['[data-multi-record-selection-identifier="'+t+'"]',e].join(" "):e}static getIdentifier(e){var t;return(null===(t=e.closest("[data-multi-record-selection-identifier]"))||void 0===t?void 0:t.dataset.multiRecordSelectionIdentifier)||""}static changeCheckboxState(e,t){e.checked===t||e.dataset.manuallyChanged||(e.checked=t,e.dispatchEvent(new CustomEvent("multiRecordSelection:checkbox:state:changed",{detail:{identifier:d.getIdentifier(e)},bubbles:!0,cancelable:!1})))}static getReturnUrl(e){return""===e&&(e=top.list_frame.document.location.pathname+top.list_frame.document.location.search),encodeURIComponent(e)}static restoreTemporaryState(){const e=d.getCheckboxes(r.checked);if(!e.length)return;let t=!1,c=[];e.forEach(e=>{e.closest("tr").classList.add("success");const o=d.getIdentifier(e);""===o||c.includes(o)||(c.push(o),t=!0,d.toggleActionsState(o))}),t||d.toggleActionsState()}static toggleActionsState(e=""){const t=document.querySelectorAll(d.getCombinedSelector(i.actionsSelector,e));if(!t.length)return;if(!d.getCheckboxes(r.checked,e).length)return void t.forEach(e=>d.changeActionContainerVisibility(e,!1));t.forEach(e=>d.changeActionContainerVisibility(e));const c=document.querySelectorAll([d.getCombinedSelector(i.actionsSelector,e),a.actionButton].join(" "));c.length&&c.forEach(t=>{if(!t.dataset.multiRecordSelectionActionConfig)return;const c=JSON.parse(t.dataset.multiRecordSelectionActionConfig);if(!c.idField)return;t.classList.add("disabled");const o=d.getCheckboxes(r.checked,e);for(let e=0;e<o.length;e++)if(o[e].closest("tr").dataset[c.idField]){t.classList.remove("disabled");break}})}static changeActionContainerVisibility(e,t=!0){var c;const o=null===(c=e.closest(".panel-heading"))||void 0===c?void 0:c.children;if(t){if(o)for(let e=0;e<o.length;e++)o[e].classList.add("hidden");e.classList.remove("hidden")}else{if(o)for(let e=0;e<o.length;e++)o[e].classList.remove("hidden");e.classList.add("hidden")}}static unsetManuallyChangedAttribute(e){d.getCheckboxes(r.any,e).forEach(e=>{e.removeAttribute("data-manually-changed")})}registerActions(){new n("click",(e,t)=>{t.dataset.multiRecordSelectionAction;const o=d.getIdentifier(t),n=d.getCheckboxes(r.checked,o);if(n.length)switch(t.dataset.multiRecordSelectionAction){case l.edit:e.preventDefault();const i=JSON.parse(t.dataset.multiRecordSelectionActionConfig||"");if(!i||!i.idField||!i.table)break;const a=[];n.forEach(e=>{const t=e.closest("tr");null!==t&&t.dataset[i.idField]&&a.push(t.dataset[i.idField])}),a.length?window.location.href=top.TYPO3.settings.FormEngine.moduleUrl+"&edit["+i.table+"]["+a.join(",")+"]=edit&returnUrl="+d.getReturnUrl(i.returnUrl||""):c.warning("The selected elements can not be edited.");break;default:t.dispatchEvent(new CustomEvent("multiRecordSelection:action:"+t.dataset.multiRecordSelectionAction,{detail:{identifier:o,checkboxes:n},bubbles:!0,cancelable:!1}))}}).delegateTo(document,[i.actionsSelector,a.actionButton].join(" ")),d.toggleActionsState()}registerActionsEventHandlers(){new n("multiRecordSelection:actions:show",e=>{var t;const c=(null===(t=e.detail)||void 0===t?void 0:t.identifier)||"",o=document.querySelectorAll(d.getCombinedSelector(i.actionsSelector,c));o.length&&o.forEach(e=>d.changeActionContainerVisibility(e))}).bindTo(document),new n("multiRecordSelection:actions:hide",e=>{var t;const c=(null===(t=e.detail)||void 0===t?void 0:t.identifier)||"",o=document.querySelectorAll(d.getCombinedSelector(i.actionsSelector,c));o.length&&o.forEach(e=>d.changeActionContainerVisibility(e,!1))}).bindTo(document)}registerCheckboxActions(){new n("click",(e,t)=>{if(e.preventDefault(),!t.dataset.multiRecordSelectionCheckAction)return;const o=d.getIdentifier(t),n=d.getCheckboxes(r.any,o);if(n.length){switch(d.unsetManuallyChangedAttribute(o),t.dataset.multiRecordSelectionCheckAction){case s.checkAll:n.forEach(e=>{d.changeCheckboxState(e,!0)});break;case s.checkNone:n.forEach(e=>{d.changeCheckboxState(e,!1)});break;case s.toggle:n.forEach(e=>{d.changeCheckboxState(e,!e.checked)});break;default:c.warning("Unknown checkbox action")}d.unsetManuallyChangedAttribute(o)}}).delegateTo(document,[i.checkboxActionsSelector,a.checkboxActionButton].join(" "))}registerCheckboxKeyboardActions(){new n("click",(e,t)=>{const c=d.getIdentifier(t);if(this.lastChecked&&document.body.contains(this.lastChecked)&&d.getIdentifier(this.lastChecked)===c){if(d.unsetManuallyChangedAttribute(c),e.shiftKey){const e=Array.from(d.getCheckboxes(r.any,c)),o=e.indexOf(t),n=e.indexOf(this.lastChecked);e.slice(Math.min(o,n),Math.max(o,n)+1).forEach(e=>{e!==t&&d.changeCheckboxState(e,t.checked)})}this.lastChecked=t,(e.altKey||e.ctrlKey)&&d.getCheckboxes(r.any,c).forEach(e=>{e!==t&&d.changeCheckboxState(e,!e.checked)}),d.unsetManuallyChangedAttribute(c)}else this.lastChecked=t}).delegateTo(document,i.checkboxSelector)}registerDispatchCheckboxStateChangedEvent(){new n("change",(e,t)=>{t.dispatchEvent(new CustomEvent("multiRecordSelection:checkbox:state:changed",{detail:{identifier:d.getIdentifier(t)},bubbles:!0,cancelable:!1}))}).delegateTo(document,i.checkboxSelector)}registerCheckboxStateChangedEventHandler(){new n("multiRecordSelection:checkbox:state:changed",e=>{var t;const c=e.target,o=(null===(t=e.detail)||void 0===t?void 0:t.identifier)||"";c.checked?c.closest("tr").classList.add("success"):c.closest("tr").classList.remove("success"),d.toggleActionsState(o)}).bindTo(document)}registerToggleCheckboxActions(){new n("click",(e,t)=>{const c=d.getIdentifier(t),o=document.querySelector([d.getCombinedSelector(i.checkboxActionsSelector,c),'button[data-multi-record-selection-check-action="'+s.checkAll+'"]'].join(" "));null!==o&&o.classList.toggle("disabled",!d.getCheckboxes(r.unchecked,c).length);const n=document.querySelector([d.getCombinedSelector(i.checkboxActionsSelector,c),'button[data-multi-record-selection-check-action="'+s.checkNone+'"]'].join(" "));null!==n&&n.classList.toggle("disabled",!d.getCheckboxes(r.checked,c).length)}).delegateTo(document,i.checkboxActionsToggleSelector)}}return new d}));