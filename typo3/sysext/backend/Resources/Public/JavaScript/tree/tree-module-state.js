/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
import AjaxRequest from"@typo3/core/ajax/ajax-request.js";import{ModuleStateStorage}from"@typo3/backend/storage/module-state-storage.js";export const TreeModuleState=e=>class extends e{constructor(){super(...arguments),this.selectActiveNodeInLoadedNodes=e=>{let t=ModuleStateStorage.current(this.moduleStateType);if(!t.identifier)return;const{nodes:i}=e.detail,r=this.transformModuleStateIdentifierToNodeIdentifier(t.treeIdentifier),d=this.transformModuleStateIdentifierToNodeIdentifier(t.identifier),n=i.find((e=>null!==t.treeIdentifier&&e.__treeIdentifier===r||null===t.treeIdentifier&&e.identifier===d));if(!n)return;null===t.treeIdentifier&&(t=ModuleStateStorage.updateWithTreeIdentifier(this.moduleStateType,this.transformNodeIdentifierToModuleStateIdentifier(n.identifier),this.transformNodeIdentifierToModuleStateIdentifier(n.__treeIdentifier))),n.checked=!0;const o=i.find((e=>e.__treeIdentifier===n.__parents.join("_")));o&&!o.__expanded&&this.tree.updateComplete.then((()=>this.tree.expandNodeParents(n)))},this.fetchActiveNodeIfMissing=async()=>{const e=ModuleStateStorage.current(this.moduleStateType);e.identifier&&(this.tree.nodes.find((e=>e.checked))||await this.selectActiveViaRootline(e.identifier))},this.moduleStateUpdated=async e=>{const t=e.detail.state.identifier;if(!this.tree)return;if(t&&t===e.detail.oldState.identifier&&this.tree.nodes.find((e=>e.checked)))return;if(!t)return void console.error("invalid identifier",e.detail);this.tree.loading&&await this.tree.loadComplete;const i=this.transformModuleStateIdentifierToNodeIdentifier(t),r=this.tree.nodes.find((e=>e.identifier===i)),d=this.tree.nodes.find((e=>e.checked));if(r&&r===d)return void await this.tree.expandNodeParents(r);r?await this.selectActiveNodeByParents(t,r.__parents,false):await this.selectActiveViaRootline(t)}}connectedCallback(){super.connectedCallback(),document.addEventListener("typo3:module-state-storage:update:"+this.moduleStateType,this.moduleStateUpdated)}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("typo3:module-state-storage:update:"+this.moduleStateType,this.moduleStateUpdated)}transformModuleStateIdentifierToNodeIdentifier(e){return e}transformNodeIdentifierToModuleStateIdentifier(e){return e}async selectActiveViaRootline(e){const t=new URL(this.tree.settings.rootlineUrl,window.location.origin);t.searchParams.set("identifier",e);const i=await new AjaxRequest(t.toString()).get({cache:"no-cache"}),{rootline:r}=await i.resolve();r.pop();await this.selectActiveNodeByParents(e,r.map((e=>this.transformModuleStateIdentifierToNodeIdentifier(e))),!1)}async selectActiveNodeByParents(e,t,i=!0){await this.tree.expandParents(t);const r=this.transformModuleStateIdentifierToNodeIdentifier(e),d=this.tree.nodes.find((e=>e.identifier===r));d&&this.tree.selectNode(d,i)}};