version: '2.3'
services:
  chrome:
    image: selenium/standalone-chrome:3.141.59-20210713
    tmpfs:
      - /dev/shm:rw,nosuid,nodev,noexec,relatime

  mysql:
    image: mysql:${MYSQL_VERSION}
    environment:
      MYSQL_ROOT_PASSWORD: funcp
    tmpfs:
      - /var/lib/mysql/:rw,noexec,nosuid

  mariadb:
    image: mariadb:${MARIADB_VERSION}
    environment:
      MYSQL_ROOT_PASSWORD: funcp
    tmpfs:
      - /var/lib/mysql/:rw,noexec,nosuid

  mssql2019latest:
    image: typo3/core-testing-mssql2019:latest
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Test1234!"
      MSSQL_PID: Developer

  postgres:
    image: postgres:${POSTGRES_VERSION}-alpine
    environment:
      POSTGRES_PASSWORD: funcp
      POSTGRES_USER: funcu
    tmpfs:
      - /var/lib/postgresql/data:rw,noexec,nosuid

  web:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    stop_grace_period: 1s
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          php -S web:8000 -t ${CORE_ROOT}
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          php -S web:8000 -t ${CORE_ROOT}
        fi
      "

  redis4:
    image: redis:4-alpine

  memcached1-5:
    image: memcached:1.5-alpine

  acceptance_split:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
    working_dir: ${CORE_ROOT}
    command: php -dxdebug.mode=off Build/Scripts/splitAcceptanceTests.php -v ${CHUNKS}

  prepare_acceptance_application_mariadb:
    image: alpine:3.8
    links:
      - mariadb
      - chrome
      - web
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z mariadb 3306; do
          sleep 1;
        done;
        echo Database is up;
      "
  acceptance_application_mariadb:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    environment:
      typo3DatabaseName: func_test
      typo3DatabaseUsername: root
      typo3DatabasePassword: funcp
      typo3DatabaseHost: mariadb
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"bin/codecept run Application -d -g AcceptanceTests-Job-${THISCHUNK} -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} ${TEST_FILE} --xml reports.xml --html reports.html\"
        else
          COMMAND=\"bin/codecept run Application -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} ${TEST_FILE} --xml reports.xml --html reports.html\"
        fi
        mkdir -p typo3temp/var/tests/
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  prepare_acceptance_application_mysql:
    image: alpine:3.8
    links:
      - mysql
      - chrome
      - web
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z mysql 3306; do
          sleep 1;
        done;
        echo Database is up;
      "
  acceptance_application_mysql:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    environment:
      typo3DatabaseName: func_test
      typo3DatabaseUsername: root
      typo3DatabasePassword: funcp
      typo3DatabaseHost: mysql
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"bin/codecept run Application -d -g AcceptanceTests-Job-${THISCHUNK} -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} ${TEST_FILE} --xml reports.xml --html reports.html\"
        else
          COMMAND=\"bin/codecept run Application -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} ${TEST_FILE} --xml reports.xml --html reports.html\"
        fi
        mkdir -p typo3temp/var/tests/
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  prepare_acceptance_application_postgres:
    image: alpine:3.8
    links:
      - postgres
      - chrome
      - web
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z postgres 5432; do
          sleep 1;
        done;
        echo Database is up;
      "
  acceptance_application_postgres:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    environment:
      typo3DatabaseDriver: pdo_pgsql
      typo3DatabaseName: bamboo
      typo3DatabaseUsername: funcu
      typo3DatabaseHost: postgres
      typo3DatabasePassword: funcp
      typo3TestingRedisHost: redis4
      typo3TestingMemcachedHost: memcached1-5
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"bin/codecept run Application -d -g AcceptanceTests-Job-${THISCHUNK} -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} ${TEST_FILE} --xml reports.xml --html reports.html\"
        else
          COMMAND=\"bin/codecept run Application -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} ${TEST_FILE} --xml reports.xml --html reports.html\"
        fi
        mkdir -p typo3temp/var/tests/
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  prepare_acceptance_install_mysql:
    image: alpine:3.8
    links:
      - mysql
      - chrome
      - web
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z mysql 3306; do
          sleep 1;
        done;
        echo Database is up;
      "
  acceptance_install_mysql:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    environment:
      typo3InstallMysqlDatabaseHost: mysql
      typo3InstallMysqlDatabaseName: func_test
      typo3InstallMysqlDatabaseUsername: root
      typo3InstallMysqlDatabasePassword: funcp
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        mkdir -p typo3temp/var/tests/
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml --env=mysql --xml reports.xml --html reports.html
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml --env=mysql --xml reports.xml --html reports.html
        fi
      "

  prepare_acceptance_install_mariadb:
    image: alpine:3.8
    links:
      - mariadb
      - chrome
      - web
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z mariadb 3306; do
          sleep 1;
        done;
        echo Database is up;
      "
  acceptance_install_mariadb:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    environment:
      typo3InstallMysqlDatabaseHost: mariadb
      typo3InstallMysqlDatabaseName: func_test
      typo3InstallMysqlDatabaseUsername: root
      typo3InstallMysqlDatabasePassword: funcp
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        mkdir -p typo3temp/var/tests/
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} --env=mysql --xml reports.xml --html reports.html
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} --env=mysql --xml reports.xml --html reports.html
        fi
      "

  prepare_acceptance_install_postgres:
    image: alpine:3.8
    links:
      - postgres
      - chrome
      - web
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z postgres 5432; do
          sleep 1;
        done;
        echo Database is up;
      "
  acceptance_install_postgres:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    environment:
      typo3InstallPostgresqlDatabaseHost: postgres
      typo3InstallPostgresqlDatabaseName: ${HOST_USER}
      typo3InstallPostgresqlDatabaseUsername: funcu
      typo3InstallPostgresqlDatabasePassword: funcp
    working_dir: ${CORE_ROOT}
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        mkdir -p typo3temp/var/tests/
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} --env=postgresql --xml reports.xml --html reports.html
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} --env=postgresql --xml reports.xml --html reports.html
        fi
      "

  prepare_acceptance_install_sqlite:
    image: alpine:3.8
    links:
      - chrome
      - web
    command: >
      /bin/sh -c "
        sleep 1;
      "
  acceptance_install_sqlite:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        mkdir -p typo3temp/var/tests/
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} --env=sqlite --xml reports.xml --html reports.html
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          bin/codecept run Install -d -c typo3/sysext/core/Tests/codeception.yml ${EXTRA_TEST_OPTIONS} --env=sqlite --xml reports.xml --html reports.html
        fi
      "

  build_css:
    image: typo3/core-testing-js:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}/Build
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        YARN_CACHE_FOLDER="../.cache/yarn" yarn install || exit 1
        node_modules/grunt/bin/grunt css
      "

  build_javascript:
    image: typo3/core-testing-js:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}/Build
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        YARN_CACHE_FOLDER="../.cache/yarn" yarn install || exit 1
        node_modules/grunt/bin/grunt scripts
      "

  cgl_git:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        Build/Scripts/cglFixMyCommit.sh ${CGLCHECK_DRY_RUN};
      "

  cgl_all:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off bin/php-cs-fixer fix -v ${CGLCHECK_DRY_RUN} --path-mode intersection \
          --config=Build/php-cs-fixer.php typo3/
      "

  check_annotations:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off Build/Scripts/annotationChecker.php;
      "

  check_test_methods_prefix:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off Build/Scripts/testMethodPrefixChecker.php;
      "

  check_bom:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        Build/Scripts/checkUtf8Bom.sh
      "

  check_composer:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off Build/Scripts/checkIntegrityComposer.php;
      "

  check_csv_fixtures:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off Build/Scripts/checkIntegrityCsvFixtures.php;
      "

  fix_csv_fixtures:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off Build/Scripts/checkIntegrityCsvFixtures.php --fix;
      "

  check_exception_codes:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        Build/Scripts/duplicateExceptionCodeCheck.sh;
      "

  check_extension_scanner_rst:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off Build/Scripts/extensionScannerRstFileReferences.php;
      "

  check_file_path_length:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        Build/Scripts/maxFilePathLength.sh;
      "

  check_git_submodule:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        if [ `git submodule status 2>&1 | wc -l` -ne 0 ]; then
          echo \"Found a submodule definition in repository\";
          exit 1;
        fi
      "

  check_grunt_clean:
    image: typo3/core-testing-js:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}/Build
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        YARN_CACHE_FOLDER="../.cache/yarn" yarn install || exit 1
        node_modules/grunt/bin/grunt build;
        cd ..;
        git add *;
        git status;
        git status | grep -q \"nothing to commit, working tree clean\"
      "

  check_permissions:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        Build/Scripts/checkFilePermissions.sh;
      "

  check_rst:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -dxdebug.mode=off Build/Scripts/validateRstFiles.php;
      "

  composer_install:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    environment:
      COMPOSER_CACHE_DIR: ".cache/composer"
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        composer install --no-progress --no-interaction;
      "

  composer_install_max:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    environment:
      COMPOSER_CACHE_DIR: ".cache/composer"
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        composer config --unset platform.php;
        composer update --no-progress --no-interaction;
        composer dumpautoload;
      "

  composer_install_min:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    environment:
      COMPOSER_CACHE_DIR: ".cache/composer"
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        composer config platform.php ${PHP_VERSION}.0;
        composer update --prefer-lowest --no-progress --no-interaction;
        composer dumpautoload;
      "

  composer_test_distribution:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    environment:
      COMPOSER_ROOT_VERSION: dev-master
      COMPOSER_CACHE_DIR: .cache/composer
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        cd Build/composer
        rm -rf composer.json composer.lock public/index.php public/typo3 public/typo3conf/ext var/ vendor/;
        cp composer.dist.json composer.json;
        composer update --no-progress --no-interaction;
      "

  composer_validate:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        composer validate;
      "

  functional_split:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
    working_dir: ${CORE_ROOT}
    command: php -dxdebug.mode=off Build/Scripts/splitFunctionalTests.php -v ${CHUNKS}

  prepare_functional_mariadb:
    image: alpine:3.8
    links:
      - mariadb
      - redis4
      - memcached1-5
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z mariadb 3306; do
          sleep 1;
        done;
        echo Database is up;
      "
  functional_mariadb:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    environment:
      typo3DatabaseDriver: "${DATABASE_DRIVER}"
      typo3DatabaseName: func_test
      typo3DatabaseUsername: root
      typo3DatabasePassword: funcp
      typo3DatabaseHost: mariadb
      typo3TestingRedisHost: redis4
      typo3TestingMemcachedHost: memcached1-5
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests-Job-${THISCHUNK}.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE}\"
        else
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE}\"
        fi
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  prepare_functional_mysql:
    image: alpine:3.8
    links:
      - mysql
      - redis4
      - memcached1-5
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z mysql 3306; do
          sleep 1;
        done;
        echo Database is up;
      "
  functional_mysql:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    environment:
      typo3DatabaseDriver: "${DATABASE_DRIVER}"
      typo3DatabaseName: func_test
      typo3DatabaseUsername: root
      typo3DatabasePassword: funcp
      typo3DatabaseHost: mysql
      typo3TestingRedisHost: redis4
      typo3TestingMemcachedHost: memcached1-5
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests-Job-${THISCHUNK}.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE}\"
        else
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE}\"
        fi
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  prepare_functional_mssql2019latest:
    image: alpine:3.8
    links:
      - mssql2019latest
      - redis4
      - memcached1-5
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z mssql2019latest 1433; do
          sleep 1;
        done;
        echo Database is up;
      "

  functional_mssql2019latest:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    environment:
      typo3DatabaseDriver: "${DATABASE_DRIVER}"
      typo3DatabaseName: func
      typo3DatabasePassword: "Test1234!"
      typo3DatabaseUsername: SA
      typo3DatabasePort: 1433
      typo3DatabaseCharset: utf-8
      typo3DatabaseHost: mssql2019latest
      typo3TestingRedisHost: redis4
      typo3TestingMemcachedHost: memcached1-5
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests-Job-${THISCHUNK}.xml ${EXTRA_TEST_OPTIONS} --exclude-group not-mssql ${TEST_FILE}\"
        else
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests.xml ${EXTRA_TEST_OPTIONS} --exclude-group not-mssql ${TEST_FILE}\"
        fi
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  prepare_functional_postgres:
    image: alpine:3.8
    links:
      - postgres
      - redis4
      - memcached1-5
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        echo Waiting for database start...;
        while ! nc -z postgres 5432; do
          sleep 1;
        done;
        echo Database is up;
      "
  functional_postgres:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    environment:
      typo3DatabaseDriver: pdo_pgsql
      typo3DatabaseName: bamboo
      typo3DatabaseUsername: funcu
      typo3DatabaseHost: postgres
      typo3DatabasePassword: funcp
      typo3TestingRedisHost: redis4
      typo3TestingMemcachedHost: memcached1-5
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests-Job-${THISCHUNK}.xml ${EXTRA_TEST_OPTIONS} --exclude-group not-postgres ${TEST_FILE}\"
        else
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests.xml ${EXTRA_TEST_OPTIONS} --exclude-group not-postgres ${TEST_FILE}\"
        fi
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  prepare_functional_sqlite:
    image: alpine:3.8
    links:
      - redis4
      - memcached1-5
    command: >
      /bin/sh -c "
        sleep 1;
      "
  functional_sqlite:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    tmpfs:
      - ${CORE_ROOT}/typo3temp/var/tests/functional-sqlite-dbs/:rw,noexec,nosuid,uid=${HOST_UID}
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    environment:
      typo3DatabaseDriver: pdo_sqlite
      typo3TestingRedisHost: redis4
      typo3TestingMemcachedHost: memcached1-5
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${CHUNKS} -gt 0 ]; then
          echo \"Running chunk ${THISCHUNK}\"
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests-Job-${THISCHUNK}.xml ${EXTRA_TEST_OPTIONS} --exclude-group not-sqlite ${TEST_FILE}\"
        else
          COMMAND=\"vendor/phpunit/phpunit/phpunit -c Build/phpunit/FunctionalTests.xml ${EXTRA_TEST_OPTIONS} --exclude-group not-sqlite ${TEST_FILE}\"
        fi
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" $${COMMAND};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          $${COMMAND};
        fi
      "

  lint_php:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        find typo3/ -name \\*.php -print0 | xargs -0 -n1 -P4 php -dxdebug.mode=off -l >/dev/null
      "

  lint_scss:
    image: typo3/core-testing-js:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}/Build
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        YARN_CACHE_FOLDER="../.cache/yarn" yarn install || exit 1
        node_modules/grunt/bin/grunt stylelint;
      "

  lint_html:
    image: typo3/core-testing-js:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}/Build
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        YARN_CACHE_FOLDER="../.cache/yarn" yarn install || exit 1
        node_modules/grunt/bin/grunt lintspaces;
      "

  lint_typescript:
    image: typo3/core-testing-js:latest
    user: "${HOST_UID}"
    volumes:
    - ${CORE_ROOT}:${CORE_ROOT}
    - ${HOST_HOME}:${HOST_HOME}
    - ${PASSWD_PATH}:/etc/passwd:ro
    - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}/Build
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        YARN_CACHE_FOLDER="../.cache/yarn" yarn install || exit 1
        node_modules/grunt/bin/grunt eslint;
      "

  list_exception_codes:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        Build/Scripts/duplicateExceptionCodeCheck.sh -p;
      "

  phpstan:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        mkdir -p .cache
        bin/phpstan analyse --no-progress --no-interaction --memory-limit 4G ${TEST_FILE}
      "

  unit:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          vendor/phpunit/phpunit/phpunit -c Build/phpunit/UnitTests.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          vendor/phpunit/phpunit/phpunit -c Build/phpunit/UnitTests.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE};
        fi
      "

  unitDeprecated:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          vendor/phpunit/phpunit/phpunit -c Build/phpunit/UnitTestsDeprecated.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          vendor/phpunit/phpunit/phpunit -c Build/phpunit/UnitTestsDeprecated.xml ${EXTRA_TEST_OPTIONS} ${TEST_FILE};
        fi
      "

  unitJavascript:
    image: typo3/core-testing-js-chrome:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}/Build
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        YARN_CACHE_FOLDER="../.cache/yarn" yarn install || exit 1
        cd ..;
        Build/node_modules/karma/bin/karma start vendor/typo3/testing-framework/Resources/Core/Build/Configuration/JSUnit/karma.conf.ci.js --single-run
      "

  unitRandom:
    image: typo3/core-testing-${DOCKER_PHP_IMAGE}:latest
    user: "${HOST_UID}"
    volumes:
      - ${CORE_ROOT}:${CORE_ROOT}
      - ${HOST_HOME}:${HOST_HOME}
      - ${PASSWD_PATH}:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    working_dir: ${CORE_ROOT}
    command: >
      /bin/sh -c "
        if [ ${SCRIPT_VERBOSE} -eq 1 ]; then
          set -x
        fi
        php -v | grep '^PHP'
        if [ ${PHP_XDEBUG_ON} -eq 0 ]; then
          XDEBUG_MODE=\"off\" \
          vendor/phpunit/phpunit/phpunit -c Build/phpunit/UnitTests.xml --order-by=random ${EXTRA_TEST_OPTIONS} ${PHPUNIT_RANDOM} ${TEST_FILE};
        else
          DOCKER_HOST=`route -n | awk '/^0.0.0.0/ { print $$2 }'`
          XDEBUG_MODE=\"debug,develop\" \
          XDEBUG_TRIGGER=\"foo\" \
          XDEBUG_CONFIG=\"client_port=${PHP_XDEBUG_PORT} client_host=$${DOCKER_HOST}\" \
          vendor/phpunit/phpunit/phpunit -c Build/phpunit/UnitTests.xml --order-by=random ${EXTRA_TEST_OPTIONS} ${PHPUNIT_RANDOM} ${TEST_FILE};
        fi
      "
